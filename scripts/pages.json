[{"name":"abstract fun <T> merge(container: StateContainer<T>, scope: CoroutineScope, block: suspend (State, T) -> State): Job","description":"dev.stateholder.StateContainer.merge","location":"core/dev.stateholder/-state-container/merge.html","searchKeys":["merge","abstract fun <T> merge(container: StateContainer<T>, scope: CoroutineScope, block: suspend (State, T) -> State): Job","dev.stateholder.StateContainer.merge"]},{"name":"abstract fun <T> merge(flow: Flow<T>, scope: CoroutineScope, block: suspend (State, T) -> State): Job","description":"dev.stateholder.StateContainer.merge","location":"core/dev.stateholder/-state-container/merge.html","searchKeys":["merge","abstract fun <T> merge(flow: Flow<T>, scope: CoroutineScope, block: suspend (State, T) -> State): Job","dev.stateholder.StateContainer.merge"]},{"name":"abstract fun <T> merge(holder: StateHolder<T>, scope: CoroutineScope, block: suspend (State, T) -> State): Job","description":"dev.stateholder.StateContainer.merge","location":"core/dev.stateholder/-state-container/merge.html","searchKeys":["merge","abstract fun <T> merge(holder: StateHolder<T>, scope: CoroutineScope, block: suspend (State, T) -> State): Job","dev.stateholder.StateContainer.merge"]},{"name":"abstract fun handle(event: Event)","description":"dev.stateholder.EventHolder.handle","location":"core/dev.stateholder/-event-holder/handle.html","searchKeys":["handle","abstract fun handle(event: Event)","dev.stateholder.EventHolder.handle"]},{"name":"abstract fun provide(): State","description":"dev.stateholder.StateProvider.provide","location":"core/dev.stateholder/-state-provider/provide.html","searchKeys":["provide","abstract fun provide(): State","dev.stateholder.StateProvider.provide"]},{"name":"abstract fun update(block: (State) -> State)","description":"dev.stateholder.StateContainer.update","location":"core/dev.stateholder/-state-container/update.html","searchKeys":["update","abstract fun update(block: (State) -> State)","dev.stateholder.StateContainer.update"]},{"name":"abstract val events: StateFlow<PersistentList<Event>>","description":"dev.stateholder.EventHolder.events","location":"core/dev.stateholder/-event-holder/events.html","searchKeys":["events","abstract val events: StateFlow<PersistentList<Event>>","dev.stateholder.EventHolder.events"]},{"name":"abstract val state: StateFlow<State>","description":"dev.stateholder.StateContainer.state","location":"core/dev.stateholder/-state-container/state.html","searchKeys":["state","abstract val state: StateFlow<State>","dev.stateholder.StateContainer.state"]},{"name":"abstract val state: StateFlow<State>","description":"dev.stateholder.StateHolder.state","location":"core/dev.stateholder/-state-holder/state.html","searchKeys":["state","abstract val state: StateFlow<State>","dev.stateholder.StateHolder.state"]},{"name":"fun <State, T> StateHolder<State>.collectState(lifecycleOwner: LifecycleOwner, selector: (State) -> T, minActiveState: Lifecycle.State = Lifecycle.State.STARTED, context: CoroutineContext = EmptyCoroutineContext, block: (T) -> Unit): Job","description":"dev.stateholder.collectState","location":"core/dev.stateholder/collect-state.html","searchKeys":["collectState","fun <State, T> StateHolder<State>.collectState(lifecycleOwner: LifecycleOwner, selector: (State) -> T, minActiveState: Lifecycle.State = Lifecycle.State.STARTED, context: CoroutineContext = EmptyCoroutineContext, block: (T) -> Unit): Job","dev.stateholder.collectState"]},{"name":"fun <State> StateContainer<State>.asStateHolder(): StateHolder<State>","description":"dev.stateholder.asStateHolder","location":"core/dev.stateholder/as-state-holder.html","searchKeys":["asStateHolder","fun <State> StateContainer<State>.asStateHolder(): StateHolder<State>","dev.stateholder.asStateHolder"]},{"name":"fun <State> StateHolder<State>.collectState(lifecycleOwner: LifecycleOwner, minActiveState: Lifecycle.State = Lifecycle.State.STARTED, context: CoroutineContext = EmptyCoroutineContext, block: (State) -> Unit): Job","description":"dev.stateholder.collectState","location":"core/dev.stateholder/collect-state.html","searchKeys":["collectState","fun <State> StateHolder<State>.collectState(lifecycleOwner: LifecycleOwner, minActiveState: Lifecycle.State = Lifecycle.State.STARTED, context: CoroutineContext = EmptyCoroutineContext, block: (State) -> Unit): Job","dev.stateholder.collectState"]},{"name":"fun <State> provideState(block: () -> State): StateProvider<State>","description":"dev.stateholder.provideState","location":"core/dev.stateholder/provide-state.html","searchKeys":["provideState","fun <State> provideState(block: () -> State): StateProvider<State>","dev.stateholder.provideState"]},{"name":"fun <State> provideState(state: State): StateProvider<State>","description":"dev.stateholder.provideState","location":"core/dev.stateholder/provide-state.html","searchKeys":["provideState","fun <State> provideState(state: State): StateProvider<State>","dev.stateholder.provideState"]},{"name":"fun <State> stateContainer(initialState: State): StateContainer<State>","description":"dev.stateholder.stateContainer","location":"core/dev.stateholder/state-container.html","searchKeys":["stateContainer","fun <State> stateContainer(initialState: State): StateContainer<State>","dev.stateholder.stateContainer"]},{"name":"fun <State> stateContainer(initialStateProvider: StateProvider<State>): StateContainer<State>","description":"dev.stateholder.stateContainer","location":"core/dev.stateholder/state-container.html","searchKeys":["stateContainer","fun <State> stateContainer(initialStateProvider: StateProvider<State>): StateContainer<State>","dev.stateholder.stateContainer"]},{"name":"fun <T : Any> T.asStateProvider(): StateProvider<T>","description":"dev.stateholder.asStateProvider","location":"core/dev.stateholder/as-state-provider.html","searchKeys":["asStateProvider","fun <T : Any> T.asStateProvider(): StateProvider<T>","dev.stateholder.asStateProvider"]},{"name":"fun <T, State> Flow<T>.mergeWithState(container: StateContainer<State>, scope: CoroutineScope, block: suspend (state: State, value: T) -> State): Job","description":"dev.stateholder.mergeWithState","location":"core/dev.stateholder/merge-with-state.html","searchKeys":["mergeWithState","fun <T, State> Flow<T>.mergeWithState(container: StateContainer<State>, scope: CoroutineScope, block: suspend (state: State, value: T) -> State): Job","dev.stateholder.mergeWithState"]},{"name":"fun interface StateProvider<State>","description":"dev.stateholder.StateProvider","location":"core/dev.stateholder/-state-provider/index.html","searchKeys":["StateProvider","fun interface StateProvider<State>","dev.stateholder.StateProvider"]},{"name":"interface EventHolder<Event>","description":"dev.stateholder.EventHolder","location":"core/dev.stateholder/-event-holder/index.html","searchKeys":["EventHolder","interface EventHolder<Event>","dev.stateholder.EventHolder"]},{"name":"interface StateContainer<State>","description":"dev.stateholder.StateContainer","location":"core/dev.stateholder/-state-container/index.html","searchKeys":["StateContainer","interface StateContainer<State>","dev.stateholder.StateContainer"]},{"name":"interface StateHolder<State>","description":"dev.stateholder.StateHolder","location":"core/dev.stateholder/-state-holder/index.html","searchKeys":["StateHolder","interface StateHolder<State>","dev.stateholder.StateHolder"]},{"name":"object Companion","description":"dev.stateholder.StateContainer.Companion","location":"core/dev.stateholder/-state-container/-companion/index.html","searchKeys":["Companion","object Companion","dev.stateholder.StateContainer.Companion"]},{"name":"object Companion","description":"dev.stateholder.StateHolder.Companion","location":"core/dev.stateholder/-state-holder/-companion/index.html","searchKeys":["Companion","object Companion","dev.stateholder.StateHolder.Companion"]},{"name":"open operator fun getValue(stateHolder: StateHolder<State>, property: KProperty<*>): StateFlow<State>","description":"dev.stateholder.StateContainer.getValue","location":"core/dev.stateholder/-state-container/get-value.html","searchKeys":["getValue","open operator fun getValue(stateHolder: StateHolder<State>, property: KProperty<*>): StateFlow<State>","dev.stateholder.StateContainer.getValue"]},{"name":"fun <State, T> Fragment.collectState(stateHolder: StateHolder<State>, selector: (State) -> T, minActiveState: Lifecycle.State = Lifecycle.State.STARTED, context: CoroutineContext = EmptyCoroutineContext, block: (T) -> Unit): Job","description":"dev.stateholder.extensions.collectState","location":"extensions-android/dev.stateholder.extensions/collect-state.html","searchKeys":["collectState","fun <State, T> Fragment.collectState(stateHolder: StateHolder<State>, selector: (State) -> T, minActiveState: Lifecycle.State = Lifecycle.State.STARTED, context: CoroutineContext = EmptyCoroutineContext, block: (T) -> Unit): Job","dev.stateholder.extensions.collectState"]},{"name":"fun <State, T> FragmentActivity.collectState(stateHolder: StateHolder<State>, selector: (State) -> T, minActiveState: Lifecycle.State = Lifecycle.State.STARTED, context: CoroutineContext = EmptyCoroutineContext, block: (T) -> Unit): Job","description":"dev.stateholder.extensions.collectState","location":"extensions-android/dev.stateholder.extensions/collect-state.html","searchKeys":["collectState","fun <State, T> FragmentActivity.collectState(stateHolder: StateHolder<State>, selector: (State) -> T, minActiveState: Lifecycle.State = Lifecycle.State.STARTED, context: CoroutineContext = EmptyCoroutineContext, block: (T) -> Unit): Job","dev.stateholder.extensions.collectState"]},{"name":"fun <State> Fragment.collectState(stateHolder: StateHolder<State>, minActiveState: Lifecycle.State = Lifecycle.State.STARTED, context: CoroutineContext = EmptyCoroutineContext, block: (State) -> Unit): Job","description":"dev.stateholder.extensions.collectState","location":"extensions-android/dev.stateholder.extensions/collect-state.html","searchKeys":["collectState","fun <State> Fragment.collectState(stateHolder: StateHolder<State>, minActiveState: Lifecycle.State = Lifecycle.State.STARTED, context: CoroutineContext = EmptyCoroutineContext, block: (State) -> Unit): Job","dev.stateholder.extensions.collectState"]},{"name":"fun <State> FragmentActivity.collectState(stateHolder: StateHolder<State>, minActiveState: Lifecycle.State = Lifecycle.State.STARTED, context: CoroutineContext = EmptyCoroutineContext, block: (State) -> Unit): Job","description":"dev.stateholder.extensions.collectState","location":"extensions-android/dev.stateholder.extensions/collect-state.html","searchKeys":["collectState","fun <State> FragmentActivity.collectState(stateHolder: StateHolder<State>, minActiveState: Lifecycle.State = Lifecycle.State.STARTED, context: CoroutineContext = EmptyCoroutineContext, block: (State) -> Unit): Job","dev.stateholder.extensions.collectState"]},{"name":"fun <Event> HandleEvents(events: List<Event>, handle: (Event) -> Unit? = null, onEvent: suspend (Event) -> Unit)","description":"dev.stateholder.extensions.HandleEvents","location":"extensions-compose/dev.stateholder.extensions/-handle-events.html","searchKeys":["HandleEvents","fun <Event> HandleEvents(events: List<Event>, handle: (Event) -> Unit? = null, onEvent: suspend (Event) -> Unit)","dev.stateholder.extensions.HandleEvents"]},{"name":"fun <Event> HandleEvents(events: PersistentList<Event>, handle: (Event) -> Unit? = null, onEvent: suspend (Event) -> Unit)","description":"dev.stateholder.extensions.HandleEvents","location":"extensions-compose/dev.stateholder.extensions/-handle-events.html","searchKeys":["HandleEvents","fun <Event> HandleEvents(events: PersistentList<Event>, handle: (Event) -> Unit? = null, onEvent: suspend (Event) -> Unit)","dev.stateholder.extensions.HandleEvents"]},{"name":"fun <Event> HandleEvents(holder: EventHolder<Event>, shouldHandle: (Event) -> Boolean = { true }, onEvent: suspend (Event) -> Unit)","description":"dev.stateholder.extensions.HandleEvents","location":"extensions-compose/dev.stateholder.extensions/-handle-events.html","searchKeys":["HandleEvents","fun <Event> HandleEvents(holder: EventHolder<Event>, shouldHandle: (Event) -> Boolean = { true }, onEvent: suspend (Event) -> Unit)","dev.stateholder.extensions.HandleEvents"]},{"name":"fun <T> StateHolder<T>.collectAsState(lifecycleOwner: LifecycleOwner = LocalLifecycleOwner.current, minActiveState: Lifecycle.State = Lifecycle.State.STARTED, context: CoroutineContext = EmptyCoroutineContext): State<T>","description":"dev.stateholder.extensions.collectAsState","location":"extensions-compose/dev.stateholder.extensions/collect-as-state.html","searchKeys":["collectAsState","fun <T> StateHolder<T>.collectAsState(lifecycleOwner: LifecycleOwner = LocalLifecycleOwner.current, minActiveState: Lifecycle.State = Lifecycle.State.STARTED, context: CoroutineContext = EmptyCoroutineContext): State<T>","dev.stateholder.extensions.collectAsState"]},{"name":"fun <Action, T1, T2, T3, T4, T5, T6> Dispatcher<Action>.rememberRelayOf(action: (T1, T2, T3, T4, T5, T6) -> Action): (T1, T2, T3, T4, T5, T6) -> Unit","description":"dev.stateholder.dispatcher.rememberRelayOf","location":"dispatcher-compose/dev.stateholder.dispatcher/remember-relay-of.html","searchKeys":["rememberRelayOf","fun <Action, T1, T2, T3, T4, T5, T6> Dispatcher<Action>.rememberRelayOf(action: (T1, T2, T3, T4, T5, T6) -> Action): (T1, T2, T3, T4, T5, T6) -> Unit","dev.stateholder.dispatcher.rememberRelayOf"]},{"name":"fun <Action, T1, T2, T3, T4, T5> Dispatcher<Action>.rememberRelayOf(action: (T1, T2, T3, T4, T5) -> Action): (T1, T2, T3, T4, T5) -> Unit","description":"dev.stateholder.dispatcher.rememberRelayOf","location":"dispatcher-compose/dev.stateholder.dispatcher/remember-relay-of.html","searchKeys":["rememberRelayOf","fun <Action, T1, T2, T3, T4, T5> Dispatcher<Action>.rememberRelayOf(action: (T1, T2, T3, T4, T5) -> Action): (T1, T2, T3, T4, T5) -> Unit","dev.stateholder.dispatcher.rememberRelayOf"]},{"name":"fun <Action, T1, T2, T3, T4> Dispatcher<Action>.rememberRelayOf(action: (T1, T2, T3, T4) -> Action): (T1, T2, T3, T4) -> Unit","description":"dev.stateholder.dispatcher.rememberRelayOf","location":"dispatcher-compose/dev.stateholder.dispatcher/remember-relay-of.html","searchKeys":["rememberRelayOf","fun <Action, T1, T2, T3, T4> Dispatcher<Action>.rememberRelayOf(action: (T1, T2, T3, T4) -> Action): (T1, T2, T3, T4) -> Unit","dev.stateholder.dispatcher.rememberRelayOf"]},{"name":"fun <Action, T1, T2, T3> Dispatcher<Action>.rememberRelayOf(action: (T1, T2, T3) -> Action): (T1, T2, T3) -> Unit","description":"dev.stateholder.dispatcher.rememberRelayOf","location":"dispatcher-compose/dev.stateholder.dispatcher/remember-relay-of.html","searchKeys":["rememberRelayOf","fun <Action, T1, T2, T3> Dispatcher<Action>.rememberRelayOf(action: (T1, T2, T3) -> Action): (T1, T2, T3) -> Unit","dev.stateholder.dispatcher.rememberRelayOf"]},{"name":"fun <Action, T1, T2> Dispatcher<Action>.rememberRelayOf(action: (T1, T2) -> Action): (T1, T2) -> Unit","description":"dev.stateholder.dispatcher.rememberRelayOf","location":"dispatcher-compose/dev.stateholder.dispatcher/remember-relay-of.html","searchKeys":["rememberRelayOf","fun <Action, T1, T2> Dispatcher<Action>.rememberRelayOf(action: (T1, T2) -> Action): (T1, T2) -> Unit","dev.stateholder.dispatcher.rememberRelayOf"]},{"name":"fun <Action, T1> Dispatcher<Action>.rememberRelayOf(action: (T1) -> Action): (T1) -> Unit","description":"dev.stateholder.dispatcher.rememberRelayOf","location":"dispatcher-compose/dev.stateholder.dispatcher/remember-relay-of.html","searchKeys":["rememberRelayOf","fun <Action, T1> Dispatcher<Action>.rememberRelayOf(action: (T1) -> Action): (T1) -> Unit","dev.stateholder.dispatcher.rememberRelayOf"]},{"name":"fun <Action> Dispatcher<Action>.rememberRelay(action: Action): () -> Unit","description":"dev.stateholder.dispatcher.rememberRelay","location":"dispatcher-compose/dev.stateholder.dispatcher/remember-relay.html","searchKeys":["rememberRelay","fun <Action> Dispatcher<Action>.rememberRelay(action: Action): () -> Unit","dev.stateholder.dispatcher.rememberRelay"]},{"name":"fun <Action> rememberDebounceDispatcher(debounce: Long = 100, exclude: List<Action> = emptyList(), block: (Action) -> Unit): Dispatcher<Action>","description":"dev.stateholder.dispatcher.rememberDebounceDispatcher","location":"dispatcher-compose/dev.stateholder.dispatcher/remember-debounce-dispatcher.html","searchKeys":["rememberDebounceDispatcher","fun <Action> rememberDebounceDispatcher(debounce: Long = 100, exclude: List<Action> = emptyList(), block: (Action) -> Unit): Dispatcher<Action>","dev.stateholder.dispatcher.rememberDebounceDispatcher"]},{"name":"fun <Action> rememberDispatcher(block: (Action) -> Unit): Dispatcher<Action>","description":"dev.stateholder.dispatcher.rememberDispatcher","location":"dispatcher-compose/dev.stateholder.dispatcher/remember-dispatcher.html","searchKeys":["rememberDispatcher","fun <Action> rememberDispatcher(block: (Action) -> Unit): Dispatcher<Action>","dev.stateholder.dispatcher.rememberDispatcher"]},{"name":"fun <Action> rememberDispatcher(debounce: Long, exclude: List<Action> = emptyList(), block: (Action) -> Unit): Dispatcher<Action>","description":"dev.stateholder.dispatcher.rememberDispatcher","location":"dispatcher-compose/dev.stateholder.dispatcher/remember-dispatcher.html","searchKeys":["rememberDispatcher","fun <Action> rememberDispatcher(debounce: Long, exclude: List<Action> = emptyList(), block: (Action) -> Unit): Dispatcher<Action>","dev.stateholder.dispatcher.rememberDispatcher"]},{"name":"class AppModel : UiStateScreenModel<AppModel.State, AppModel.Event> ","description":"dev.jordond.stateholder.demo.AppModel","location":"demo/dev.jordond.stateholder.demo/-app-model/index.html","searchKeys":["AppModel","class AppModel : UiStateScreenModel<AppModel.State, AppModel.Event> ","dev.jordond.stateholder.demo.AppModel"]},{"name":"class AppScreen : Screen","description":"dev.jordond.stateholder.demo.AppScreen","location":"demo/dev.jordond.stateholder.demo/-app-screen/index.html","searchKeys":["AppScreen","class AppScreen : Screen","dev.jordond.stateholder.demo.AppScreen"]},{"name":"class MainActivity : ComponentActivity","description":"dev.jordond.stateholder.demo.MainActivity","location":"demo/dev.jordond.stateholder.demo/-main-activity/index.html","searchKeys":["MainActivity","class MainActivity : ComponentActivity","dev.jordond.stateholder.demo.MainActivity"]},{"name":"class MainApp : Application","description":"dev.jordond.stateholder.demo.MainApp","location":"demo/dev.jordond.stateholder.demo/-main-app/index.html","searchKeys":["MainApp","class MainApp : Application","dev.jordond.stateholder.demo.MainApp"]},{"name":"constructor()","description":"dev.jordond.stateholder.demo.AppModel.AppModel","location":"demo/dev.jordond.stateholder.demo/-app-model/-app-model.html","searchKeys":["AppModel","constructor()","dev.jordond.stateholder.demo.AppModel.AppModel"]},{"name":"constructor()","description":"dev.jordond.stateholder.demo.AppScreen.AppScreen","location":"demo/dev.jordond.stateholder.demo/-app-screen/-app-screen.html","searchKeys":["AppScreen","constructor()","dev.jordond.stateholder.demo.AppScreen.AppScreen"]},{"name":"constructor()","description":"dev.jordond.stateholder.demo.MainActivity.MainActivity","location":"demo/dev.jordond.stateholder.demo/-main-activity/-main-activity.html","searchKeys":["MainActivity","constructor()","dev.jordond.stateholder.demo.MainActivity.MainActivity"]},{"name":"constructor()","description":"dev.jordond.stateholder.demo.MainApp.MainApp","location":"demo/dev.jordond.stateholder.demo/-main-app/-main-app.html","searchKeys":["MainApp","constructor()","dev.jordond.stateholder.demo.MainApp.MainApp"]},{"name":"constructor(count: Int = 0)","description":"dev.jordond.stateholder.demo.AppModel.State.State","location":"demo/dev.jordond.stateholder.demo/-app-model/-state/-state.html","searchKeys":["State","constructor(count: Int = 0)","dev.jordond.stateholder.demo.AppModel.State.State"]},{"name":"constructor(count: Int)","description":"dev.jordond.stateholder.demo.AppAction.SetCount.SetCount","location":"demo/dev.jordond.stateholder.demo/-app-action/-set-count/-set-count.html","searchKeys":["SetCount","constructor(count: Int)","dev.jordond.stateholder.demo.AppAction.SetCount.SetCount"]},{"name":"data class SetCount(val count: Int) : AppAction","description":"dev.jordond.stateholder.demo.AppAction.SetCount","location":"demo/dev.jordond.stateholder.demo/-app-action/-set-count/index.html","searchKeys":["SetCount","data class SetCount(val count: Int) : AppAction","dev.jordond.stateholder.demo.AppAction.SetCount"]},{"name":"data class State(val count: Int = 0)","description":"dev.jordond.stateholder.demo.AppModel.State","location":"demo/dev.jordond.stateholder.demo/-app-model/-state/index.html","searchKeys":["State","data class State(val count: Int = 0)","dev.jordond.stateholder.demo.AppModel.State"]},{"name":"data object Decrement : AppAction","description":"dev.jordond.stateholder.demo.AppAction.Decrement","location":"demo/dev.jordond.stateholder.demo/-app-action/-decrement/index.html","searchKeys":["Decrement","data object Decrement : AppAction","dev.jordond.stateholder.demo.AppAction.Decrement"]},{"name":"data object Increment : AppAction","description":"dev.jordond.stateholder.demo.AppAction.Increment","location":"demo/dev.jordond.stateholder.demo/-app-action/-increment/index.html","searchKeys":["Increment","data object Increment : AppAction","dev.jordond.stateholder.demo.AppAction.Increment"]},{"name":"data object Toast : AppModel.Event","description":"dev.jordond.stateholder.demo.AppModel.Event.Toast","location":"demo/dev.jordond.stateholder.demo/-app-model/-event/-toast/index.html","searchKeys":["Toast","data object Toast : AppModel.Event","dev.jordond.stateholder.demo.AppModel.Event.Toast"]},{"name":"data object TriggerEvent : AppAction","description":"dev.jordond.stateholder.demo.AppAction.TriggerEvent","location":"demo/dev.jordond.stateholder.demo/-app-action/-trigger-event/index.html","searchKeys":["TriggerEvent","data object TriggerEvent : AppAction","dev.jordond.stateholder.demo.AppAction.TriggerEvent"]},{"name":"fun App()","description":"dev.jordond.stateholder.demo.App","location":"demo/dev.jordond.stateholder.demo/-app.html","searchKeys":["App","fun App()","dev.jordond.stateholder.demo.App"]},{"name":"fun AppAndroidPreview()","description":"dev.jordond.stateholder.demo.AppAndroidPreview","location":"demo/dev.jordond.stateholder.demo/-app-android-preview.html","searchKeys":["AppAndroidPreview","fun AppAndroidPreview()","dev.jordond.stateholder.demo.AppAndroidPreview"]},{"name":"fun CustomCount(initialCount: Int, updateCount: (Int) -> Unit, modifier: Modifier = Modifier)","description":"dev.jordond.stateholder.demo.CustomCount","location":"demo/dev.jordond.stateholder.demo/-custom-count.html","searchKeys":["CustomCount","fun CustomCount(initialCount: Int, updateCount: (Int) -> Unit, modifier: Modifier = Modifier)","dev.jordond.stateholder.demo.CustomCount"]},{"name":"fun decrement()","description":"dev.jordond.stateholder.demo.AppModel.decrement","location":"demo/dev.jordond.stateholder.demo/-app-model/decrement.html","searchKeys":["decrement","fun decrement()","dev.jordond.stateholder.demo.AppModel.decrement"]},{"name":"fun increment()","description":"dev.jordond.stateholder.demo.AppModel.increment","location":"demo/dev.jordond.stateholder.demo/-app-model/increment.html","searchKeys":["increment","fun increment()","dev.jordond.stateholder.demo.AppModel.increment"]},{"name":"fun main()","description":"main","location":"demo/[root]/main.html","searchKeys":["main","fun main()","main"]},{"name":"fun setCount(count: Int)","description":"dev.jordond.stateholder.demo.AppModel.setCount","location":"demo/dev.jordond.stateholder.demo/-app-model/set-count.html","searchKeys":["setCount","fun setCount(count: Int)","dev.jordond.stateholder.demo.AppModel.setCount"]},{"name":"fun triggerEvent()","description":"dev.jordond.stateholder.demo.AppModel.triggerEvent","location":"demo/dev.jordond.stateholder.demo/-app-model/trigger-event.html","searchKeys":["triggerEvent","fun triggerEvent()","dev.jordond.stateholder.demo.AppModel.triggerEvent"]},{"name":"open override fun Content()","description":"dev.jordond.stateholder.demo.AppScreen.Content","location":"demo/dev.jordond.stateholder.demo/-app-screen/-content.html","searchKeys":["Content","open override fun Content()","dev.jordond.stateholder.demo.AppScreen.Content"]},{"name":"sealed interface AppAction","description":"dev.jordond.stateholder.demo.AppAction","location":"demo/dev.jordond.stateholder.demo/-app-action/index.html","searchKeys":["AppAction","sealed interface AppAction","dev.jordond.stateholder.demo.AppAction"]},{"name":"sealed interface Event","description":"dev.jordond.stateholder.demo.AppModel.Event","location":"demo/dev.jordond.stateholder.demo/-app-model/-event/index.html","searchKeys":["Event","sealed interface Event","dev.jordond.stateholder.demo.AppModel.Event"]},{"name":"val count: Int","description":"dev.jordond.stateholder.demo.AppAction.SetCount.count","location":"demo/dev.jordond.stateholder.demo/-app-action/-set-count/count.html","searchKeys":["count","val count: Int","dev.jordond.stateholder.demo.AppAction.SetCount.count"]},{"name":"val count: Int = 0","description":"dev.jordond.stateholder.demo.AppModel.State.count","location":"demo/dev.jordond.stateholder.demo/-app-model/-state/count.html","searchKeys":["count","val count: Int = 0","dev.jordond.stateholder.demo.AppModel.State.count"]},{"name":"abstract fun dispatch(action: Action)","description":"dev.stateholder.dispatcher.Dispatcher.dispatch","location":"dispatcher/dev.stateholder.dispatcher/-dispatcher/dispatch.html","searchKeys":["dispatch","abstract fun dispatch(action: Action)","dev.stateholder.dispatcher.Dispatcher.dispatch"]},{"name":"fun <Action> DebounceDispatcher(debounce: Long = 100, exclude: List<Action> = emptyList(), block: (Action) -> Unit): Dispatcher<Action>","description":"dev.stateholder.dispatcher.DebounceDispatcher","location":"dispatcher/dev.stateholder.dispatcher/-debounce-dispatcher.html","searchKeys":["DebounceDispatcher","fun <Action> DebounceDispatcher(debounce: Long = 100, exclude: List<Action> = emptyList(), block: (Action) -> Unit): Dispatcher<Action>","dev.stateholder.dispatcher.DebounceDispatcher"]},{"name":"fun <Action> Dispatcher(debounce: Long, exclude: List<Action> = emptyList(), block: (Action) -> Unit): Dispatcher<Action>","description":"dev.stateholder.dispatcher.Dispatcher","location":"dispatcher/dev.stateholder.dispatcher/-dispatcher.html","searchKeys":["Dispatcher","fun <Action> Dispatcher(debounce: Long, exclude: List<Action> = emptyList(), block: (Action) -> Unit): Dispatcher<Action>","dev.stateholder.dispatcher.Dispatcher"]},{"name":"fun interface Dispatcher<Action>","description":"dev.stateholder.dispatcher.Dispatcher","location":"dispatcher/dev.stateholder.dispatcher/-dispatcher/index.html","searchKeys":["Dispatcher","fun interface Dispatcher<Action>","dev.stateholder.dispatcher.Dispatcher"]},{"name":"object Companion","description":"dev.stateholder.dispatcher.Dispatcher.Companion","location":"dispatcher/dev.stateholder.dispatcher/-dispatcher/-companion/index.html","searchKeys":["Companion","object Companion","dev.stateholder.dispatcher.Dispatcher.Companion"]},{"name":"open fun <T1, T2, T3, T4, T5, T6> relayOf(action: (T1, T2, T3, T4, T5, T6) -> Action): (T1, T2, T3, T4, T5, T6) -> Unit","description":"dev.stateholder.dispatcher.Dispatcher.relayOf","location":"dispatcher/dev.stateholder.dispatcher/-dispatcher/relay-of.html","searchKeys":["relayOf","open fun <T1, T2, T3, T4, T5, T6> relayOf(action: (T1, T2, T3, T4, T5, T6) -> Action): (T1, T2, T3, T4, T5, T6) -> Unit","dev.stateholder.dispatcher.Dispatcher.relayOf"]},{"name":"open fun <T1, T2, T3, T4, T5> relayOf(action: (T1, T2, T3, T4, T5) -> Action): (T1, T2, T3, T4, T5) -> Unit","description":"dev.stateholder.dispatcher.Dispatcher.relayOf","location":"dispatcher/dev.stateholder.dispatcher/-dispatcher/relay-of.html","searchKeys":["relayOf","open fun <T1, T2, T3, T4, T5> relayOf(action: (T1, T2, T3, T4, T5) -> Action): (T1, T2, T3, T4, T5) -> Unit","dev.stateholder.dispatcher.Dispatcher.relayOf"]},{"name":"open fun <T1, T2, T3, T4> relayOf(action: (T1, T2, T3, T4) -> Action): (T1, T2, T3, T4) -> Unit","description":"dev.stateholder.dispatcher.Dispatcher.relayOf","location":"dispatcher/dev.stateholder.dispatcher/-dispatcher/relay-of.html","searchKeys":["relayOf","open fun <T1, T2, T3, T4> relayOf(action: (T1, T2, T3, T4) -> Action): (T1, T2, T3, T4) -> Unit","dev.stateholder.dispatcher.Dispatcher.relayOf"]},{"name":"open fun <T1, T2, T3> relayOf(action: (T1, T2, T3) -> Action): (T1, T2, T3) -> Unit","description":"dev.stateholder.dispatcher.Dispatcher.relayOf","location":"dispatcher/dev.stateholder.dispatcher/-dispatcher/relay-of.html","searchKeys":["relayOf","open fun <T1, T2, T3> relayOf(action: (T1, T2, T3) -> Action): (T1, T2, T3) -> Unit","dev.stateholder.dispatcher.Dispatcher.relayOf"]},{"name":"open fun <T1, T2> relayOf(action: (T1, T2) -> Action): (T1, T2) -> Unit","description":"dev.stateholder.dispatcher.Dispatcher.relayOf","location":"dispatcher/dev.stateholder.dispatcher/-dispatcher/relay-of.html","searchKeys":["relayOf","open fun <T1, T2> relayOf(action: (T1, T2) -> Action): (T1, T2) -> Unit","dev.stateholder.dispatcher.Dispatcher.relayOf"]},{"name":"open fun <T1> relayOf(action: (T1) -> Action): (T1) -> Unit","description":"dev.stateholder.dispatcher.Dispatcher.relayOf","location":"dispatcher/dev.stateholder.dispatcher/-dispatcher/relay-of.html","searchKeys":["relayOf","open fun <T1> relayOf(action: (T1) -> Action): (T1) -> Unit","dev.stateholder.dispatcher.Dispatcher.relayOf"]},{"name":"open fun relay(action: Action): () -> Unit","description":"dev.stateholder.dispatcher.Dispatcher.relay","location":"dispatcher/dev.stateholder.dispatcher/-dispatcher/relay.html","searchKeys":["relay","open fun relay(action: Action): () -> Unit","dev.stateholder.dispatcher.Dispatcher.relay"]},{"name":"open operator fun invoke(action: Action)","description":"dev.stateholder.dispatcher.Dispatcher.invoke","location":"dispatcher/dev.stateholder.dispatcher/-dispatcher/invoke.html","searchKeys":["invoke","open operator fun invoke(action: Action)","dev.stateholder.dispatcher.Dispatcher.invoke"]},{"name":"abstract class StateViewModel<State>(stateContainer: StateContainer<State>) : ViewModel, StateHolder<State> ","description":"dev.stateholder.extensions.viewmodel.StateViewModel","location":"extensions-viewmodel/dev.stateholder.extensions.viewmodel/-state-view-model/index.html","searchKeys":["StateViewModel","abstract class StateViewModel<State>(stateContainer: StateContainer<State>) : ViewModel, StateHolder<State> ","dev.stateholder.extensions.viewmodel.StateViewModel"]},{"name":"abstract class UiStateViewModel<State, Event>(stateContainer: StateContainer<State>) : StateViewModel<State> , EventHolder<Event> ","description":"dev.stateholder.extensions.viewmodel.UiStateViewModel","location":"extensions-viewmodel/dev.stateholder.extensions.viewmodel/-ui-state-view-model/index.html","searchKeys":["UiStateViewModel","abstract class UiStateViewModel<State, Event>(stateContainer: StateContainer<State>) : StateViewModel<State> , EventHolder<Event> ","dev.stateholder.extensions.viewmodel.UiStateViewModel"]},{"name":"constructor(initialState: State)","description":"dev.stateholder.extensions.viewmodel.StateViewModel.StateViewModel","location":"extensions-viewmodel/dev.stateholder.extensions.viewmodel/-state-view-model/-state-view-model.html","searchKeys":["StateViewModel","constructor(initialState: State)","dev.stateholder.extensions.viewmodel.StateViewModel.StateViewModel"]},{"name":"constructor(initialState: State)","description":"dev.stateholder.extensions.viewmodel.UiStateViewModel.UiStateViewModel","location":"extensions-viewmodel/dev.stateholder.extensions.viewmodel/-ui-state-view-model/-ui-state-view-model.html","searchKeys":["UiStateViewModel","constructor(initialState: State)","dev.stateholder.extensions.viewmodel.UiStateViewModel.UiStateViewModel"]},{"name":"constructor(stateContainer: StateContainer<State>)","description":"dev.stateholder.extensions.viewmodel.StateViewModel.StateViewModel","location":"extensions-viewmodel/dev.stateholder.extensions.viewmodel/-state-view-model/-state-view-model.html","searchKeys":["StateViewModel","constructor(stateContainer: StateContainer<State>)","dev.stateholder.extensions.viewmodel.StateViewModel.StateViewModel"]},{"name":"constructor(stateContainer: StateContainer<State>)","description":"dev.stateholder.extensions.viewmodel.UiStateViewModel.UiStateViewModel","location":"extensions-viewmodel/dev.stateholder.extensions.viewmodel/-ui-state-view-model/-ui-state-view-model.html","searchKeys":["UiStateViewModel","constructor(stateContainer: StateContainer<State>)","dev.stateholder.extensions.viewmodel.UiStateViewModel.UiStateViewModel"]},{"name":"constructor(stateProvider: StateProvider<State>)","description":"dev.stateholder.extensions.viewmodel.StateViewModel.StateViewModel","location":"extensions-viewmodel/dev.stateholder.extensions.viewmodel/-state-view-model/-state-view-model.html","searchKeys":["StateViewModel","constructor(stateProvider: StateProvider<State>)","dev.stateholder.extensions.viewmodel.StateViewModel.StateViewModel"]},{"name":"constructor(stateProvider: StateProvider<State>)","description":"dev.stateholder.extensions.viewmodel.UiStateViewModel.UiStateViewModel","location":"extensions-viewmodel/dev.stateholder.extensions.viewmodel/-ui-state-view-model/-ui-state-view-model.html","searchKeys":["UiStateViewModel","constructor(stateProvider: StateProvider<State>)","dev.stateholder.extensions.viewmodel.UiStateViewModel.UiStateViewModel"]},{"name":"open override fun handle(event: Event)","description":"dev.stateholder.extensions.viewmodel.UiStateViewModel.handle","location":"extensions-viewmodel/dev.stateholder.extensions.viewmodel/-ui-state-view-model/handle.html","searchKeys":["handle","open override fun handle(event: Event)","dev.stateholder.extensions.viewmodel.UiStateViewModel.handle"]},{"name":"open override val events: StateFlow<PersistentList<Event>>","description":"dev.stateholder.extensions.viewmodel.UiStateViewModel.events","location":"extensions-viewmodel/dev.stateholder.extensions.viewmodel/-ui-state-view-model/events.html","searchKeys":["events","open override val events: StateFlow<PersistentList<Event>>","dev.stateholder.extensions.viewmodel.UiStateViewModel.events"]},{"name":"open override val state: StateFlow<State>","description":"dev.stateholder.extensions.viewmodel.StateViewModel.state","location":"extensions-viewmodel/dev.stateholder.extensions.viewmodel/-state-view-model/state.html","searchKeys":["state","open override val state: StateFlow<State>","dev.stateholder.extensions.viewmodel.StateViewModel.state"]},{"name":"abstract class StateScreenModel<State>(stateContainer: StateContainer<State>) : ScreenModel, StateHolder<State> ","description":"dev.stateholder.extensions.voyager.StateScreenModel","location":"extensions-voyager/dev.stateholder.extensions.voyager/-state-screen-model/index.html","searchKeys":["StateScreenModel","abstract class StateScreenModel<State>(stateContainer: StateContainer<State>) : ScreenModel, StateHolder<State> ","dev.stateholder.extensions.voyager.StateScreenModel"]},{"name":"abstract class UiStateScreenModel<State, Event>(stateContainer: StateContainer<State>) : StateScreenModel<State> , EventHolder<Event> ","description":"dev.stateholder.extensions.voyager.UiStateScreenModel","location":"extensions-voyager/dev.stateholder.extensions.voyager/-ui-state-screen-model/index.html","searchKeys":["UiStateScreenModel","abstract class UiStateScreenModel<State, Event>(stateContainer: StateContainer<State>) : StateScreenModel<State> , EventHolder<Event> ","dev.stateholder.extensions.voyager.UiStateScreenModel"]},{"name":"constructor(initialState: State)","description":"dev.stateholder.extensions.voyager.StateScreenModel.StateScreenModel","location":"extensions-voyager/dev.stateholder.extensions.voyager/-state-screen-model/-state-screen-model.html","searchKeys":["StateScreenModel","constructor(initialState: State)","dev.stateholder.extensions.voyager.StateScreenModel.StateScreenModel"]},{"name":"constructor(initialState: State)","description":"dev.stateholder.extensions.voyager.UiStateScreenModel.UiStateScreenModel","location":"extensions-voyager/dev.stateholder.extensions.voyager/-ui-state-screen-model/-ui-state-screen-model.html","searchKeys":["UiStateScreenModel","constructor(initialState: State)","dev.stateholder.extensions.voyager.UiStateScreenModel.UiStateScreenModel"]},{"name":"constructor(stateContainer: StateContainer<State>)","description":"dev.stateholder.extensions.voyager.StateScreenModel.StateScreenModel","location":"extensions-voyager/dev.stateholder.extensions.voyager/-state-screen-model/-state-screen-model.html","searchKeys":["StateScreenModel","constructor(stateContainer: StateContainer<State>)","dev.stateholder.extensions.voyager.StateScreenModel.StateScreenModel"]},{"name":"constructor(stateContainer: StateContainer<State>)","description":"dev.stateholder.extensions.voyager.UiStateScreenModel.UiStateScreenModel","location":"extensions-voyager/dev.stateholder.extensions.voyager/-ui-state-screen-model/-ui-state-screen-model.html","searchKeys":["UiStateScreenModel","constructor(stateContainer: StateContainer<State>)","dev.stateholder.extensions.voyager.UiStateScreenModel.UiStateScreenModel"]},{"name":"constructor(stateProvider: StateProvider<State>)","description":"dev.stateholder.extensions.voyager.StateScreenModel.StateScreenModel","location":"extensions-voyager/dev.stateholder.extensions.voyager/-state-screen-model/-state-screen-model.html","searchKeys":["StateScreenModel","constructor(stateProvider: StateProvider<State>)","dev.stateholder.extensions.voyager.StateScreenModel.StateScreenModel"]},{"name":"constructor(stateProvider: StateProvider<State>)","description":"dev.stateholder.extensions.voyager.UiStateScreenModel.UiStateScreenModel","location":"extensions-voyager/dev.stateholder.extensions.voyager/-ui-state-screen-model/-ui-state-screen-model.html","searchKeys":["UiStateScreenModel","constructor(stateProvider: StateProvider<State>)","dev.stateholder.extensions.voyager.UiStateScreenModel.UiStateScreenModel"]},{"name":"open override fun handle(event: Event)","description":"dev.stateholder.extensions.voyager.UiStateScreenModel.handle","location":"extensions-voyager/dev.stateholder.extensions.voyager/-ui-state-screen-model/handle.html","searchKeys":["handle","open override fun handle(event: Event)","dev.stateholder.extensions.voyager.UiStateScreenModel.handle"]},{"name":"open override val events: StateFlow<PersistentList<Event>>","description":"dev.stateholder.extensions.voyager.UiStateScreenModel.events","location":"extensions-voyager/dev.stateholder.extensions.voyager/-ui-state-screen-model/events.html","searchKeys":["events","open override val events: StateFlow<PersistentList<Event>>","dev.stateholder.extensions.voyager.UiStateScreenModel.events"]},{"name":"open override val state: StateFlow<State>","description":"dev.stateholder.extensions.voyager.StateScreenModel.state","location":"extensions-voyager/dev.stateholder.extensions.voyager/-state-screen-model/state.html","searchKeys":["state","open override val state: StateFlow<State>","dev.stateholder.extensions.voyager.StateScreenModel.state"]}]