[{"name":"abstract fun <T> addSource(flow: Flow<T>, scope: CoroutineScope, block: suspend (State, T) -> State): Job","description":"dev.stateholder.StateHolder.addSource","location":"core/dev.stateholder/-state-holder/add-source.html","searchKeys":["addSource","abstract fun <T> addSource(flow: Flow<T>, scope: CoroutineScope, block: suspend (State, T) -> State): Job","dev.stateholder.StateHolder.addSource"]},{"name":"abstract fun provide(): State","description":"dev.stateholder.StateProvider.provide","location":"core/dev.stateholder/-state-provider/provide.html","searchKeys":["provide","abstract fun provide(): State","dev.stateholder.StateProvider.provide"]},{"name":"abstract fun update(block: (State) -> State)","description":"dev.stateholder.StateHolder.update","location":"core/dev.stateholder/-state-holder/update.html","searchKeys":["update","abstract fun update(block: (State) -> State)","dev.stateholder.StateHolder.update"]},{"name":"abstract val state: StateFlow<State>","description":"dev.stateholder.StateHolder.state","location":"core/dev.stateholder/-state-holder/state.html","searchKeys":["state","abstract val state: StateFlow<State>","dev.stateholder.StateHolder.state"]},{"name":"abstract val state: StateFlow<State>","description":"dev.stateholder.StateOwner.state","location":"core/dev.stateholder/-state-owner/state.html","searchKeys":["state","abstract val state: StateFlow<State>","dev.stateholder.StateOwner.state"]},{"name":"fun <State> StateHolder<State>.asStateOwner(): StateOwner<State>","description":"dev.stateholder.asStateOwner","location":"core/dev.stateholder/as-state-owner.html","searchKeys":["asStateOwner","fun <State> StateHolder<State>.asStateOwner(): StateOwner<State>","dev.stateholder.asStateOwner"]},{"name":"fun <State> provideState(block: () -> State): StateProvider<State>","description":"dev.stateholder.provideState","location":"core/dev.stateholder/provide-state.html","searchKeys":["provideState","fun <State> provideState(block: () -> State): StateProvider<State>","dev.stateholder.provideState"]},{"name":"fun <State> provideState(state: State): StateProvider<State>","description":"dev.stateholder.provideState","location":"core/dev.stateholder/provide-state.html","searchKeys":["provideState","fun <State> provideState(state: State): StateProvider<State>","dev.stateholder.provideState"]},{"name":"fun <State> stateContainer(initialState: State): StateHolder<State>","description":"dev.stateholder.stateContainer","location":"core/dev.stateholder/state-container.html","searchKeys":["stateContainer","fun <State> stateContainer(initialState: State): StateHolder<State>","dev.stateholder.stateContainer"]},{"name":"fun <State> stateContainer(initialStateProvider: StateProvider<State>): StateHolder<State>","description":"dev.stateholder.stateContainer","location":"core/dev.stateholder/state-container.html","searchKeys":["stateContainer","fun <State> stateContainer(initialStateProvider: StateProvider<State>): StateHolder<State>","dev.stateholder.stateContainer"]},{"name":"fun <T : Any> T.asStateProvider(): StateProvider<T>","description":"dev.stateholder.asStateProvider","location":"core/dev.stateholder/as-state-provider.html","searchKeys":["asStateProvider","fun <T : Any> T.asStateProvider(): StateProvider<T>","dev.stateholder.asStateProvider"]},{"name":"fun <T, State> Flow<T>.collectToState(container: StateHolder<State>, scope: CoroutineScope, block: suspend (state: State, value: T) -> State): Job","description":"dev.stateholder.collectToState","location":"core/dev.stateholder/collect-to-state.html","searchKeys":["collectToState","fun <T, State> Flow<T>.collectToState(container: StateHolder<State>, scope: CoroutineScope, block: suspend (state: State, value: T) -> State): Job","dev.stateholder.collectToState"]},{"name":"fun interface StateProvider<State>","description":"dev.stateholder.StateProvider","location":"core/dev.stateholder/-state-provider/index.html","searchKeys":["StateProvider","fun interface StateProvider<State>","dev.stateholder.StateProvider"]},{"name":"interface StateHolder<State>","description":"dev.stateholder.StateHolder","location":"core/dev.stateholder/-state-holder/index.html","searchKeys":["StateHolder","interface StateHolder<State>","dev.stateholder.StateHolder"]},{"name":"interface StateOwner<State>","description":"dev.stateholder.StateOwner","location":"core/dev.stateholder/-state-owner/index.html","searchKeys":["StateOwner","interface StateOwner<State>","dev.stateholder.StateOwner"]},{"name":"object Companion","description":"dev.stateholder.StateHolder.Companion","location":"core/dev.stateholder/-state-holder/-companion/index.html","searchKeys":["Companion","object Companion","dev.stateholder.StateHolder.Companion"]},{"name":"object Companion","description":"dev.stateholder.StateOwner.Companion","location":"core/dev.stateholder/-state-owner/-companion/index.html","searchKeys":["Companion","object Companion","dev.stateholder.StateOwner.Companion"]},{"name":"open operator fun getValue(stateOwner: StateOwner<State>, property: KProperty<*>): StateFlow<State>","description":"dev.stateholder.StateHolder.getValue","location":"core/dev.stateholder/-state-holder/get-value.html","searchKeys":["getValue","open operator fun getValue(stateOwner: StateOwner<State>, property: KProperty<*>): StateFlow<State>","dev.stateholder.StateHolder.getValue"]},{"name":"abstract class StateViewModel<State>(stateHolder: StateHolder<State>) : ViewModel, StateOwner<State> ","description":"dev.stateholder.extensions.StateViewModel","location":"extensions-android/dev.stateholder.extensions/-state-view-model/index.html","searchKeys":["StateViewModel","abstract class StateViewModel<State>(stateHolder: StateHolder<State>) : ViewModel, StateOwner<State> ","dev.stateholder.extensions.StateViewModel"]},{"name":"constructor(initialState: State)","description":"dev.stateholder.extensions.StateViewModel.StateViewModel","location":"extensions-android/dev.stateholder.extensions/-state-view-model/-state-view-model.html","searchKeys":["StateViewModel","constructor(initialState: State)","dev.stateholder.extensions.StateViewModel.StateViewModel"]},{"name":"constructor(stateHolder: StateHolder<State>)","description":"dev.stateholder.extensions.StateViewModel.StateViewModel","location":"extensions-android/dev.stateholder.extensions/-state-view-model/-state-view-model.html","searchKeys":["StateViewModel","constructor(stateHolder: StateHolder<State>)","dev.stateholder.extensions.StateViewModel.StateViewModel"]},{"name":"constructor(stateProvider: StateProvider<State>)","description":"dev.stateholder.extensions.StateViewModel.StateViewModel","location":"extensions-android/dev.stateholder.extensions/-state-view-model/-state-view-model.html","searchKeys":["StateViewModel","constructor(stateProvider: StateProvider<State>)","dev.stateholder.extensions.StateViewModel.StateViewModel"]},{"name":"fun <State, T> Fragment.collectState(stateOwner: StateOwner<State>, selector: (State) -> T, lifecycleState: Lifecycle.State = Lifecycle.State.STARTED, block: (T) -> Unit): Job","description":"dev.stateholder.extensions.collectState","location":"extensions-android/dev.stateholder.extensions/collect-state.html","searchKeys":["collectState","fun <State, T> Fragment.collectState(stateOwner: StateOwner<State>, selector: (State) -> T, lifecycleState: Lifecycle.State = Lifecycle.State.STARTED, block: (T) -> Unit): Job","dev.stateholder.extensions.collectState"]},{"name":"fun <State, T> FragmentActivity.collectState(stateOwner: StateOwner<State>, selector: (State) -> T, lifecycleState: Lifecycle.State = Lifecycle.State.STARTED, block: (T) -> Unit): Job","description":"dev.stateholder.extensions.collectState","location":"extensions-android/dev.stateholder.extensions/collect-state.html","searchKeys":["collectState","fun <State, T> FragmentActivity.collectState(stateOwner: StateOwner<State>, selector: (State) -> T, lifecycleState: Lifecycle.State = Lifecycle.State.STARTED, block: (T) -> Unit): Job","dev.stateholder.extensions.collectState"]},{"name":"fun <State, T> StateOwner<State>.collectState(lifecycleOwner: LifecycleOwner, selector: (State) -> T, lifecycleState: Lifecycle.State = Lifecycle.State.STARTED, block: (T) -> Unit): Job","description":"dev.stateholder.extensions.collectState","location":"extensions-android/dev.stateholder.extensions/collect-state.html","searchKeys":["collectState","fun <State, T> StateOwner<State>.collectState(lifecycleOwner: LifecycleOwner, selector: (State) -> T, lifecycleState: Lifecycle.State = Lifecycle.State.STARTED, block: (T) -> Unit): Job","dev.stateholder.extensions.collectState"]},{"name":"fun <State> Fragment.collectState(stateOwner: StateOwner<State>, lifecycleState: Lifecycle.State = Lifecycle.State.STARTED, block: (State) -> Unit): Job","description":"dev.stateholder.extensions.collectState","location":"extensions-android/dev.stateholder.extensions/collect-state.html","searchKeys":["collectState","fun <State> Fragment.collectState(stateOwner: StateOwner<State>, lifecycleState: Lifecycle.State = Lifecycle.State.STARTED, block: (State) -> Unit): Job","dev.stateholder.extensions.collectState"]},{"name":"fun <State> FragmentActivity.collectState(stateOwner: StateOwner<State>, lifecycleState: Lifecycle.State = Lifecycle.State.STARTED, block: (State) -> Unit): Job","description":"dev.stateholder.extensions.collectState","location":"extensions-android/dev.stateholder.extensions/collect-state.html","searchKeys":["collectState","fun <State> FragmentActivity.collectState(stateOwner: StateOwner<State>, lifecycleState: Lifecycle.State = Lifecycle.State.STARTED, block: (State) -> Unit): Job","dev.stateholder.extensions.collectState"]},{"name":"fun <State> StateOwner<State>.collectState(lifecycleOwner: LifecycleOwner, lifecycleState: Lifecycle.State = Lifecycle.State.STARTED, block: (State) -> Unit): Job","description":"dev.stateholder.extensions.collectState","location":"extensions-android/dev.stateholder.extensions/collect-state.html","searchKeys":["collectState","fun <State> StateOwner<State>.collectState(lifecycleOwner: LifecycleOwner, lifecycleState: Lifecycle.State = Lifecycle.State.STARTED, block: (State) -> Unit): Job","dev.stateholder.extensions.collectState"]},{"name":"fun <T> Flow<T>.collectToState(scope: CoroutineScope = viewModelScope, block: suspend (state: State, value: T) -> State): Job","description":"dev.stateholder.extensions.StateViewModel.collectToState","location":"extensions-android/dev.stateholder.extensions/-state-view-model/collect-to-state.html","searchKeys":["collectToState","fun <T> Flow<T>.collectToState(scope: CoroutineScope = viewModelScope, block: suspend (state: State, value: T) -> State): Job","dev.stateholder.extensions.StateViewModel.collectToState"]},{"name":"open override val state: StateFlow<State>","description":"dev.stateholder.extensions.StateViewModel.state","location":"extensions-android/dev.stateholder.extensions/-state-view-model/state.html","searchKeys":["state","open override val state: StateFlow<State>","dev.stateholder.extensions.StateViewModel.state"]},{"name":"expect fun <T> StateOwner<T>.collectAsState(minActiveState: Lifecycle.State = Lifecycle.State.STARTED, context: CoroutineContext = EmptyCoroutineContext): State<T>","description":"dev.stateholder.extensions.collectAsState","location":"extensions-compose/dev.stateholder.extensions/collect-as-state.html","searchKeys":["collectAsState","expect fun <T> StateOwner<T>.collectAsState(minActiveState: Lifecycle.State = Lifecycle.State.STARTED, context: CoroutineContext = EmptyCoroutineContext): State<T>","dev.stateholder.extensions.collectAsState"]},{"name":"abstract class StateScreenModel<State>(stateHolder: StateHolder<State>) : ScreenModel, StateOwner<State> ","description":"dev.stateholder.extensions.voyager.StateScreenModel","location":"extensions-voyager/dev.stateholder.extensions.voyager/-state-screen-model/index.html","searchKeys":["StateScreenModel","abstract class StateScreenModel<State>(stateHolder: StateHolder<State>) : ScreenModel, StateOwner<State> ","dev.stateholder.extensions.voyager.StateScreenModel"]},{"name":"constructor(initialState: State)","description":"dev.stateholder.extensions.voyager.StateScreenModel.StateScreenModel","location":"extensions-voyager/dev.stateholder.extensions.voyager/-state-screen-model/-state-screen-model.html","searchKeys":["StateScreenModel","constructor(initialState: State)","dev.stateholder.extensions.voyager.StateScreenModel.StateScreenModel"]},{"name":"constructor(stateHolder: StateHolder<State>)","description":"dev.stateholder.extensions.voyager.StateScreenModel.StateScreenModel","location":"extensions-voyager/dev.stateholder.extensions.voyager/-state-screen-model/-state-screen-model.html","searchKeys":["StateScreenModel","constructor(stateHolder: StateHolder<State>)","dev.stateholder.extensions.voyager.StateScreenModel.StateScreenModel"]},{"name":"constructor(stateProvider: StateProvider<State>)","description":"dev.stateholder.extensions.voyager.StateScreenModel.StateScreenModel","location":"extensions-voyager/dev.stateholder.extensions.voyager/-state-screen-model/-state-screen-model.html","searchKeys":["StateScreenModel","constructor(stateProvider: StateProvider<State>)","dev.stateholder.extensions.voyager.StateScreenModel.StateScreenModel"]},{"name":"fun <T> Flow<T>.collectToState(scope: CoroutineScope = screenModelScope, block: suspend (state: State, value: T) -> State): Job","description":"dev.stateholder.extensions.voyager.StateScreenModel.collectToState","location":"extensions-voyager/dev.stateholder.extensions.voyager/-state-screen-model/collect-to-state.html","searchKeys":["collectToState","fun <T> Flow<T>.collectToState(scope: CoroutineScope = screenModelScope, block: suspend (state: State, value: T) -> State): Job","dev.stateholder.extensions.voyager.StateScreenModel.collectToState"]},{"name":"open override val state: StateFlow<State>","description":"dev.stateholder.extensions.voyager.StateScreenModel.state","location":"extensions-voyager/dev.stateholder.extensions.voyager/-state-screen-model/state.html","searchKeys":["state","open override val state: StateFlow<State>","dev.stateholder.extensions.voyager.StateScreenModel.state"]}]